name: Python Compatibility

on:
  push:
    branches: [ main, poetry-setup ]
  pull_request:
    branches: [ main ]

jobs:
  compatibility:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        pipx install poetry==1.7.1
        poetry --version

    - name: Install dependencies
      run: |
        poetry install

    - name: Run basic import test
      id: import_test
      run: |
        # Try to import the module
        poetry run python -c "import har_oa3_converter, sys; print(f'Successfully imported har_oa3_converter with Python {sys.version}')"
        echo "test_result=success" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Run minimal functionality test
      id: minimal_test
      if: steps.import_test.outputs.test_result == 'success'
      run: |
        # Create a simple test file
        echo '{"log":{"version":"1.2","entries":[]}}' > minimal.har
        # Try to convert it
        poetry run har2oa3 minimal.har -o minimal.yaml
        echo "test_result=success" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Test Summary
      run: |
        echo "## Python ${{ matrix.python-version }} Compatibility" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.import_test.outputs.test_result }}" == "success" ]; then
          echo "✅ Import test passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Import test failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.minimal_test.outputs.test_result }}" == "success" ]; then
          echo "✅ Minimal functionality test passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Minimal functionality test failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.import_test.outputs.test_result }}" == "success" ] && [ "${{ steps.minimal_test.outputs.test_result }}" == "success" ]; then
          echo "### ✅ Python ${{ matrix.python-version }} is fully compatible" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Python ${{ matrix.python-version }} has compatibility issues" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

  # Generate a compatibility badge
  generate_badge:
    needs: compatibility
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        ref: main

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        pip install shield-badge-maker
        pip install pyyaml
        
    - name: Generate Python compatibility badge
      run: |
        # Create badges directory
        mkdir -p badges
        
        # Extract Python versions from workflow file
        python << 'EOF'
        import yaml
        import json
        from shield_badge_maker import make_badge
        
        # Load the workflow file to get the matrix values
        import os
        workflow_file_path = os.getenv('WORKFLOW_FILE_PATH')
        with open(workflow_file_path, 'r') as f:
            workflow = yaml.safe_load(f)
            
        # Extract Python versions from matrix
        python_versions = workflow['jobs']['compatibility']['strategy']['matrix']['python-version']
        python_versions = [str(v) for v in python_versions]  # Ensure all versions are strings
        
        # Format the versions for display (e.g., 3.10 | 3.11 | 3.12 | 3.13)
        versions_text = ' | '.join(python_versions)
        
        # Generate the badge
        badge_svg = make_badge(
            left_text='python',
            right_text=versions_text,
            color='blue'
        )
        
        # Save to file
        with open('badges/python-versions.svg', 'w') as f:
            f.write(badge_svg)
        EOF
        
        # Also create a copy in the scripts directory for backward compatibility
        mkdir -p scripts
        cp badges/python-versions.svg scripts/python-versions-badge.svg

    - name: Update README with compatibility badge
      run: |
        if ! grep -q "badges/python-versions.svg" README.md; then
          # Add the badge after the existing badges
          sed -i '/^\[\!\[/a [![Python Versions](https://raw.githubusercontent.com/digitally-rendered/har-oa3-converter/main/badges/python-versions.svg)](https://github.com/digitally-rendered/har-oa3-converter/actions/workflows/python-compatibility.yml)' README.md
        fi

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add scripts/python-versions-badge.svg README.md
        git commit -m "Update Python compatibility badge [skip ci]" || echo "No changes to commit"
        git push
