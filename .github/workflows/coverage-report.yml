name: Coverage Report

on:
  push:
    branches: [ main, poetry-setup ]
  pull_request:
    branches: [ main ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11, 3.12, 3.13]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper coverage reporting
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      run: |
        pipx install poetry==1.7.1
        poetry --version
    
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Generate coverage report
      run: |
        poetry run pytest --cov=har_oa3_converter --cov-report=xml --cov-report=html --cov-branch
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true  # Fail CI if coverage upload fails
        verbose: true
    
    - name: Generate coverage badge
      run: |
        poetry run python -m pip install coverage-badge
        poetry run coverage-badge -o coverage-badge.svg
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
    
    - name: Check coverage threshold
      run: |
        COVERAGE=$(poetry run coverage report | grep TOTAL | awk '{print $NF}' | sed 's/%//')
        echo "Current coverage: $COVERAGE%"
        
        # Add coverage summary to GitHub step summary
        echo "## Python ${{ matrix.python-version }} Coverage Results" >> $GITHUB_STEP_SUMMARY
        echo "- Total Coverage: $COVERAGE%" >> $GITHUB_STEP_SUMMARY
        
        # Check if coverage meets the target of 100%
        if (( $(echo "$COVERAGE < 100" | bc -l) )); then
          echo "::warning::Coverage is below 100%. Current coverage: $COVERAGE%"
          echo "⚠️ Coverage is below the 100% target" >> $GITHUB_STEP_SUMMARY
          # Don't fail the build yet, but mark it as a warning
          # We'll gradually work towards 100% coverage
          # exit 1
        else
          echo "✅ Coverage meets the 100% target" >> $GITHUB_STEP_SUMMARY
        fi
